/**
 * The Node class creates node of the tree
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

class Node{

    int data;
    Node left;
    Node right;

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getLeft() {
        return left;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public Node getRight() {
        return right;
    }

    public void setRight(Node right) {
        this.right = right;
    }

    public Node(int data, Node left, Node right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

/**
 * The BST class is to create the Binary search tree
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

public class InorderSuccessor {
    Node root;

    /**
     * insertNode to insert the Node to tree
     * @param key
     * @return void
     */
    public void insertNode(int key) {
        root = insertNode(root, new Node(key, null, null));
    }

    /**
     * insertNode to insert the Node to tree
     * @param currentParent, newNode
     * @return Node
     */
    public Node insertNode(Node currentParent, Node newNode) {

        if (currentParent == null) {
            return newNode;
        } else if (newNode.getData() > currentParent.getData()) {
            currentParent.right = insertNode(currentParent.right, newNode);
        } else if (newNode.getData() < currentParent.getData()) {
            currentParent.left = insertNode(currentParent.left, newNode);
        }
        return currentParent;
    }

    /**
     * inOrderTraversal to for inOrderTraversal for Tree
     * @param root
     * @return void
     */
    public void inOrderTraversal(Node root){
        if( root == null){
            return;
        }
        inOrderTraversal(root.getLeft());
        System.out.println(root.getData());
        inOrderTraversal(root.getRight());
    }

    public Node inOrderSuccessor(Node root, int node){
        Node successor= null;
        Node temproot = root;
        while( temproot!=null){
            if( temproot.getData()> node){
                temproot = temproot.getLeft();
            }
            else if( temproot.getData() < node){
                temproot = temproot.getRight();
            }
            else {
                break;
            }
        }
        if(temproot.getRight()!=null){
            return findMin(temproot.getRight());

        } else {
            while( root!=null){
                if( root.getData()> node){
                    successor = root;
                    root = root.getLeft();
                }
                else if( root.getData() < node) {
                    root = root.getRight();
                }
                else {
                    break;
                }
            }
            return successor;
        }

    }

    private Node findMin(Node right) {

        if( right.getLeft()==null){
            return right;
        }
        System.out.println("new root " + right.getData());
        return  findMin(right.getLeft());
    }

    public static void main(String[] args) {
        InorderSuccessor tree = new InorderSuccessor();
        tree.insertNode(50);
        tree.insertNode(30);
        tree.insertNode(20);
        tree.insertNode(40);
        tree.insertNode(70);
        tree.insertNode(60);
        tree.insertNode(80);
        System.out.println("in order travseal");
        tree.inOrderTraversal(tree.root);
        Node succ = tree.inOrderSuccessor(tree.root, 80);
        if( succ!=null) {
            System.out.println("Succ of this BST " + succ.getData());
        } else
        {
            System.out.println("Last element in BST");
        }
    }
}
