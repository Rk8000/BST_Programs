/**
 * The Node class creates node of the tree
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

class Node{

    int data;
    Node left;
    Node right;

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getLeft() {
        return left;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public Node getRight() {
        return right;
    }

    public void setRight(Node right) {
        this.right = right;
    }

    public Node(int data, Node left, Node right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

/**
 * The BST class is to create the Binary search tree
 *
 * @author  Ravi Kumar Singh
 * @version 1.0
 * @since   2015-04-06
 */

public class LCAOfBST {
    Node root;

    /**
     * insertNode to insert the Node to tree
     * @param key
     * @return void
     */
    public void insertNode(int key) {
        root = insertNode(root, new Node(key, null, null));
    }

    /**
     * insertNode to insert the Node to tree
     * @param currentParent, newNode
     * @return Node
     */
    public Node insertNode(Node currentParent, Node newNode) {

        if (currentParent == null) {
            return newNode;
        } else if (newNode.getData() > currentParent.getData()) {
            currentParent.right = insertNode(currentParent.right, newNode);
        } else if (newNode.getData() < currentParent.getData()) {
            currentParent.left = insertNode(currentParent.left, newNode);
        }
        return currentParent;
    }

    /**
     * inOrderTraversal to for inOrderTraversal for Tree
     * @param root
     * @return void
     */
    public void inOrderTraversal(Node root){
        if( root == null){
            return;
        }
        inOrderTraversal(root.getLeft());
        System.out.println(root.getData());
        inOrderTraversal(root.getRight());
    }

    public Node LCAofBST(Node root, int n1, int n2){
        if( root==null){
            return root;
        }
        if( root.getData() > n1 && root.getData() > n2){
            return LCAofBST(root.getLeft(), n1, n2);
        }
        if( root.getData() < n1 && root.getData() < n2){
            return LCAofBST(root.getRight(), n1, n2);
        }
        return root;
    }


    public static void main(String[] args) {
        LCAOfBST tree = new LCAOfBST();
        tree.insertNode(50);
        tree.insertNode(30);
        tree.insertNode(20);
        tree.insertNode(40);
        tree.insertNode(70);
        tree.insertNode(60);
        tree.insertNode(80);
        System.out.println("in order travseal");
        tree.inOrderTraversal(tree.root);
        Node LCA = tree.LCAofBST(tree.root,30, 35 );
        System.out.println("LCA of this BST " + LCA.getData());
    }
}
